
/* -------- functions ---------- */
def notifySlack(STATUS, COLOR) {
/*
	slackSend (color: COLOR, message: STATUS+" : " +  "${env.JOB_NAME} [${env.BUILD_NUMBER}] (${env.BUILD_URL})")
*/
}

def emailRecipients="happycloudpak@gmail.com"
def notifyMail(STATUS, RECIPIENTS) {
/*
	emailext body: STATUS+" : " +  "${env.JOB_NAME} [${env.BUILD_NUMBER}] (${env.BUILD_URL})",
	subject: STATUS + " : " + "${env.JOB_NAME} [${env.BUILD_NUMBER}]",
	from: "happycloudpak@gmail.com",
	to: RECIPIENTS
*/
}

/* ------------------------------ */

notifySlack("STARTED", "#FFFF00")
notifyMail("STARTED", "${emailRecipients}")

node {
    String stageName = ""
    
    stageName = "Get Source"	
    stage(stageName) {
        echo "**** START : " + stageName
        
        git url: "https://github.com/happykbfg/webhook.git", branch: "main", credentialsId: "credential_github_kb05"	
    }

    //-- 환경변수 파일 읽어서 변수값 셋팅
    def props = readProperties  file:"./cicd/cicd-common.properties"  
    def props4jenkins = readProperties  file:"./cicd/jenkins.properties"  

    def imageRegistry = props["image_registry"]
    def imageOrganization = props["image_project"]
    def imageRepository = props["image_repository"]
    def imageTag = props["image_tag"]
    
    def baseDir = props4jenkins["baseDir"]
    def skipStages = props4jenkins["skipStages"]
    
    def sonarQubeURL = props4jenkins["sonarQubeURL"]
    def sonarQubeLogin = props4jenkins["sonarQubeLogin"]
    def sonarQubeProject = props4jenkins["sonarQubeProject"]
    
    def profile = props4jenkins["profile"]

    //--- runtime parameters
    def devLang = props4jenkins["devlang"]
    def bastionIP = props4jenkins["bastionIP"]
    def bastionUsername = props4jenkins["bastionUsername"]
    def bastionHome = props4jenkins["bastionHome"]
 
    def ns = props["namespace"]
    def imageRegistryHost = props4jenkins["imageRegistryHost"]
    def imageRegistryCredential = props4jenkins["imageRegistryCredential"]
    def cicdGitURL = props4jenkins["cicdGitURL"]
    //---

    try {
        stageName = "Inspect Code"
        stage(stageName) {
            echo "**** START : " + stageName
            if("${skipStages}".contains(stageName)) {
                echo "Skipped: " + stageName
            } else {
                script {
                    dir("${env.WORKSPACE}/${baseDir}"){  // change directory
                        sh ("pwd")
                        sh ("mvn sonar:sonar \
                            -Dsonar.projectKey=${sonarQubeProject}  \
                            -Dsonar.projectName=${sonarQubeProject} \
                            -Dsonar.host.url=${sonarQubeURL} \
                            -Dsonar.login=${sonarQubeLogin}")
                    }
                }				
            }
        }

        stageName = "Get CI/CD scripts"
        stage(stageName) {
            script {
                sh "cd ${env.WORKSPACE}"
                sh "rm -rf ${env.WORKSPACE}/run-cicd 2>/dev/null"
                sh "git clone ${cicdGitURL}"
            }
        }

        stageName = "Build"
        stage(stageName) {
            echo "**** START : " + stageName           
            script {                
                sh "cd ${env.WORKSPACE}/${baseDir}"
                sh "${env.WORKSPACE}/run-cicd/cmd/build-image . ${devLang} ${env.WORKSPACE}/run-cicd"
            }
        }
        
        stageName = "Push image"
		stage(stageName) {
			echo "**** START : " + stageName     
			docker.withRegistry("${imageRegistryHost}", "${imageRegistryCredential}") {
				sh "docker tag ${imageRegistry}/${imageOrganization}/${imageRepository}:${imageTag} ${imageRegistry}/${imageOrganization}/${imageRepository}:latest"
				sh "docker push ${imageRegistry}/${imageOrganization}/${imageRepository}:${imageTag}"
				sh "docker push ${imageRegistry}/${imageOrganization}/${imageRepository}:latest"				
			}
		}

        stageName = "Copy CI/CD Files to bastion"
        stage(stageName) {
            withCredentials([sshUserPrivateKey(credentialsId: "credential_bastion", keyFileVariable: "privatekey_bastion")]) {             
                sh "ssh -o StrictHostKeyChecking=no -i ${privatekey_bastion} ${bastionUsername}@${bastionIP} mkdir -p ${bastionHome}/cicd/${ns}/${imageRepository}"
                sh "ssh -i ${privatekey_bastion} ${bastionUsername}@${bastionIP} rm -rf ${bastionHome}/cicd/${ns}/run-cicd 2>/dev/null"
                sh "scp -i ${privatekey_bastion} -r ${env.WORKSPACE}/run-cicd ${bastionUsername}@${bastionIP}:${bastionHome}/cicd/${ns}/"
                sh "scp -i ${privatekey_bastion} -r ${env.WORKSPACE}/cicd ${bastionUsername}@${bastionIP}:${bastionHome}/cicd/${ns}/${imageRepository}/"
            }
        } 

        stageName = "Deploy"
        stage(stageName) {
            withCredentials([sshUserPrivateKey(credentialsId: "credential_bastion", keyFileVariable: "privatekey_bastion")]) {  
                sh "ssh -i ${privatekey_bastion} ${bastionUsername}@${bastionIP} mkdir -p ${bastionHome}/cicd/${ns}/${imageRepository}/deploy"
                sh "ssh -i ${privatekey_bastion} ${bastionUsername}@${bastionIP} rm -f ${bastionHome}/cicd/${ns}/${imageRepository}/deploy/* 2>/dev/null"
                sh "ssh -i ${privatekey_bastion} ${bastionUsername}@${bastionIP} ${bastionHome}/cicd/${ns}/run-cicd/cmd/deploy . ${profile} ${bastionHome}/cicd/${ns}/${imageRepository} ${bastionHome}/cicd/${ns}/run-cicd"
            }
        }
        
        echo "**** FINISH ALL STAGES : SUCESS"
                    
        notifySlack("${currentBuild.currentResult}", "#00FF00")
        notifyMail("${currentBuild.currentResult}", "${emailRecipients}")
    } catch(e) {
        currentBuild.result = "FAILED"
        notifySlack("${currentBuild.currentResult}", "#FF0000")
        notifyMail("${currentBuild.currentResult}", "${emailRecipients}")			
    }
}
